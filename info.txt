_________________________________________________________________


-------------------------------------REMIX ICONS--------------------------------------------

### **Purpose of Remix Icon**  
**Remix Icon** is an open-source icon library designed for web development. It provides **high-quality, customizable vector icons** that can be used in websites and applications.

---

### **Why Use Remix Icon?**
1. **Lightweight & Fast** ‚Äì Since it's a font-based icon library, it loads quickly without increasing website size.
2. **Easy to Use** ‚Äì Just add a CSS file, and use icons with simple `<i>` tags.
3. **Scalable** ‚Äì Icons don‚Äôt lose quality when resized.
4. **Customizable** ‚Äì You can easily change size, color, and style with CSS.
5. **Free & Open Source** ‚Äì No need to pay or worry about licensing.
6. **Consistent Design** ‚Äì Icons follow a uniform design, making UI look neat.

---


### **How to Use Remix Icon?**
1. **Include the Remix Icon CSS:**
   ```html
   <link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet">
   ```

2. **Use an Icon in Your HTML:**
   ```html
   <i class="ri-home-line"></i>  <!-- Displays a home icon -->
   ```

3. **Customize with CSS:**
   ```css
   i {
       font-size: 24px;
       color: red;
   }
   ```

---

### **Common Use Cases**
- **Navigation Bars** (e.g., home, settings, profile)
- **Buttons & Links** (e.g., next, previous, download)
- **Status Indicators** (e.g., checkmark, warning, error)
- **Social Media Icons** (e.g., Facebook, Twitter, LinkedIn)

---

### **Example Usage in a Button**
```html
<button class="btn">Download <i class="ri-download-line"></i></button>
```
‚û°Ô∏è This creates a button with a **Download icon** next to the text.

---

### **Conclusion**
Remix Icon is a **free, flexible, and powerful icon library** for web developers. It's great for improving UI design with simple, scalable icons.

Would you like help with specific icons? üòä


---------------------------------- SWIPPER SLIDER CSS---------------------------------------



<!-- 
The <link> tag is used to link an external CSS (Cascading Style Sheet) file to an HTML document. 
It is placed inside the <head> section and does not require a closing tag.

Attributes:
- rel="stylesheet": Specifies that the linked file is a stylesheet.
- href="": Specifies the URL or path to the CSS file.

Example Usage:
<link rel="stylesheet" href="styles.css">
This links the "styles.css" file to the HTML document, allowing it to apply styles.

If href is empty (""), no CSS file is linked.
-->


___________________________________________


<!--
  This is a comment in HTML. Anything between  and  is ignored by the browser.

  <i class="ri-arrow-right-link"></i>
  This is an icon tag that comes from the Remix Icon library.
  - <i>: This tag is used to display icons or italic text.
  - class="ri-arrow-right-link": This class name tells the browser to show a specific icon from the Remix Icon library.
    In this case, it shows a right-arrow link icon. -> The appearance of this icon depends completely upon your css styling.

  Why use comments?
  - Temporarily disable code: If you don't want the icon to appear now but may need it later, you can comment it out.
  - Notes/Documentation: You can use comments to explain code to others or leave reminders.

  To enable the icon, just remove the comment tags like this:

  <i class="ri-arrow-right-link"></i>

  After removing the comment, the icon will show up on your webpage if you include the Remix Icon CSS library.
-->


_______________________________________________________
<!--
### **What is `:root` in CSS?**  
`:root` is a **CSS pseudo-class** that represents the **highest-level element in the document** (usually the `<html>` element). It is mainly used to **define global CSS variables** that can be reused throughout the stylesheet.

---

### **Attributes (CSS Variables) in `:root`**
The properties inside `:root` are **CSS variables** (also called **custom properties**). They are declared using `--variable-name` and can be used anywhere in the CSS.

#### **Breaking Down the Code:**
```css
:root {
  --prime-color: #db4f54;            /* Primary Theme Color (Red) */
  --body-color: #1c1c1c;             /* Background Color (Dark Grey) */
  --p-color: #f6f6f6;                /* Paragraph Text Color (Light Grey) */
  --text-color: #f6f6f6;             /* General Text Color (Light Grey) */
  --light-text-color: #e3e3e3;       /* Slightly Lighter Text Color */
  --light-shadow: #82828299;         /* Light Shadow (Grey with Transparency) */
  --white-color: #fff;               /* White Color */
  --black-color: #000;               /* Black Color */
  --poppins: "Poppins", sans-serif;  /* Font Family: Poppins */
  --space-grotesk: "Space Grotesk", sans-serif; /* Font Family: Space Grotesk */
}
```

---

### **How to Use These Variables?**
You can **reference** these variables anywhere in your CSS using `var(--variable-name)`.  

#### **Example Usage:**
```css
body {
  background-color: var(--body-color);
  color: var(--text-color);
  font-family: var(--poppins);
}

h1 {
  color: var(--prime-color);
  text-shadow: 2px 2px 5px var(--light-shadow);
}
```
üîπ **`background-color: var(--body-color);`** ‚Üí Uses the body color defined in `:root`.  
üîπ **`color: var(--text-color);`** ‚Üí Uses the text color globally.  
üîπ **`font-family: var(--poppins);`** ‚Üí Uses the Poppins font for body text.  

---

### **Why Use `:root` and CSS Variables?**
‚úÖ **Easier Maintenance** ‚Äì Change the variable value in `:root`, and it updates everywhere.  
‚úÖ **Consistency** ‚Äì Keeps design elements like colors and fonts uniform across the site.  
‚úÖ **Flexibility** ‚Äì Can be dynamically updated using JavaScript for themes (dark/light mode).  

---

### **Example: Changing Theme with JavaScript**
```html
<button onclick="toggleTheme()">Toggle Dark Mode</button>

<script>
  function toggleTheme() {
    document.documentElement.style.setProperty('--body-color', '#fff');
    document.documentElement.style.setProperty('--text-color', '#000');
  }
</script>
```
üîπ Clicking the button changes `--body-color` to **white** and `--text-color` to **black**, updating the theme instantly.

---

### **Conclusion**
- `:root` is used to define **global CSS variables**.
- It improves **code reusability, consistency, and maintainability**.
- Variables are used with `var(--variable-name)`.
- You can **change CSS variables dynamically** using JavaScript.

Note:

 No, you cannot write prime-color instead of --prime-color.

Why?
In CSS, custom properties (CSS variables) must start with --.
If you write prime-color instead of --prime-color, it will be treated as an invalid property and will not work.


-->


___________________________________________

<!-- Position property in CSS

the simplified summary of the position property:

static: Default, doesn't move. Stays in its original place.
relative: Moves from where it normally is, but doesn‚Äôt mess with other elements.
absolute: Moves based on a parent element and is removed from the normal flow.
fixed: Stays in one spot in the window, even when you scroll.
sticky: Acts like normal (relative) until you scroll past a point, then sticks like fixed.

-->


___________________________________________

<!-- 
What Happens When You Use display: flex;?
When an element becomes a flex container (display: flex;), it does three main things to its child elements:

Puts them in a row by default üèõÔ∏è

Unlike normal block elements (which stack vertically), flex places items side by side in a row.
Makes them flexible üîÑ

Items expand or shrink automatically to fit inside the container.
Enables powerful alignment options üéØ

You can easily center, space out, or align items using properties like:
justify-content (horizontal alignment)
align-items (vertical alignment)
-->



___________________________________________

<!-- 

.mode i{
    animation: rotate 2s infinite linear;
    font-size:1.5rem;
}


The CSS rule you've provided defines an animation called `rotate` that applies to the `.mode i` element. Here's a breakdown of the properties:

- `animation`: This is the shorthand property for defining animations. It takes multiple values.
  
  - `rotate`: This is the name of the animation to be applied. In your code, you are referencing an animation called `rotate`, but the actual keyframes defining what happens during this animation aren't shown here.
  
  - `2s`: This is the duration of the animation, meaning the animation will take 2 seconds to complete one cycle.
  
  - `infinite`: This means the animation will repeat indefinitely.
  
  - `linear`: This specifies the timing function of the animation. In this case, it will proceed at a constant speed from start to finish.

To fully implement this animation, you would need to define the `rotate` animation using `@keyframes`. For example:

```css
@keyframes rotate {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}
```

This keyframe definition would make the element rotate 360 degrees, continuously, every 2 seconds.



-->

